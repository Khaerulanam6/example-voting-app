pipeline {
  agent any
  environment {
  //  imagename = "khaerulanam/vote"
  //  registryCredential = 'dockerlogin'
      workerImage = ''
   }
  tools{
    nodejs 'Nodejs 8.9.0'
  }
  
  stages{
    stage("npm install"){
      when{
          changeset "**/result/**"
      }
      steps{
          echo 'Compiling result app'
          dir('result'){
            sh 'npm install'
          }
      }
    }

    stage("npm test"){
      when{
          changeset "**/result/**"
      }
      steps{
        echo 'Running Unit Tets on result app'
        dir('result'){
            sh 'npm test'
        }
      }
    }


    stage('docker-build'){
        agent any
        steps{
            echo 'Packaging worker app with docker'
            script{
                docker.withRegistry('', 'dockerlogin') {
                    def workerImage = docker.build("khaerulanam/result:v${env.BUILD_ID}", "./result")
                }
            }
        }
    }

    stage('docker-push'){
        agent any
        steps{
            echo 'Packaging worker app with docker'
            script{
                docker.withRegistry('', 'dockerlogin') {
                    workerImage.push()
                    workerImage.push("latest")
                }
            }
        }
    }
    



  }

  post{
      always {
        echo 'Building multibranch pipeline for result is completed..'
      }
      failure {
          slackSend (channel: "jenkins-cicd", message: "Build Failed - ANAM - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
      }
      success {
          slackSend (channel: "jenkins-cicd", message: "Build Succeeded - ANAM - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
      }
    }
  }
