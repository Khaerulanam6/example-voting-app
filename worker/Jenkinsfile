pipeline{
  agent{
    docker{
      image 'maven:3.6.1-jdk-8-slim'
      args '-v $HOME/.m2:/root/.m2'
    }
  }
  stages{
<<<<<<< HEAD
<<<<<<< HEAD
    stage('build'){
      steps{
        echo 'building worker app'
        dir('worker'){
          sh 'mvn compile'
          sleep 3
      }
    }
  }
    stage('test'){
      steps{
        echo 'running unit tests on worker app'
        dir('worker'){
          sh 'mvn clean test'
      }
    }
  }

    stage('package'){
      steps{
        echo 'packaging worker app into a jarfile'
        dir('worker'){
          sh 'mvn package -DskipTests'
          archiveArtifacts artifacts: '**/target/*.jar', fingerprint:true
=======
    stage("build"){
      when{
          changeset "**/worker/**"
      }
      steps{
=======
    stage("build"){
      when{
          changeset "**/worker/**"
      }
      steps{
>>>>>>> 22de44a0171d0b220643706258d6704d9a888724
          echo 'Compiling worker app'
          dir('worker'){
            sh 'mvn compile'
          }
      }
    }
    stage("test"){
      when{
          changeset "**/worker/**"
      }
      steps{
        echo 'Running Unit Tets on worker app'
        dir('worker'){
            sh 'mvn clean test'
        }
      }
    }
    stage("package"){
      when{
          branch 'master'
          changeset "**/worker/**"
      }
      steps{
        echo 'Packaging worker app'
        dir('worker'){
            sh 'mvn package -DskipTests'
        }
<<<<<<< HEAD
>>>>>>> e7415dd73bcdb5d7cd983e32440a352114a44237
=======
>>>>>>> 22de44a0171d0b220643706258d6704d9a888724
      }
    }
    
    stage('docker-package'){
        agent any
        steps{
            echo 'Packaging worker app with docker'
            script{
                docker.withRegistry('https://index.docker.io/v1/', 'dockerlogin') {
                    def workerImage = docker.build("khaerulanam/worker:v${env.BUILD_ID}", "./worker")
                    workerImage.push()
                    workerImage.push("latest")
                }
            }
        }
    }
    
    
  }
<<<<<<< HEAD
<<<<<<< HEAD
}
  post{
    always{
      echo 'the job is complete'
    }
      failure {
          slackSend (channel: "jenkins-cicd", message: "Build Failed On Docker Agent - ANAM - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
      }
      success {
          slackSend (channel: "jenkins-cicd", message: "Build Succeeded On Docker Agent - ANAM - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
      }
=======

  post{
      always {
        echo 'Building multibranch pipeline for worker is completed..'
      }
      failure {
          slackSend (channel: "jenkins-cicd", message: "Build Failed - ANAM - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
      }
      success {
          slackSend (channel: "jenkins-cicd", message: "Build Succeeded - ANAM - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
      }
    }

>>>>>>> e7415dd73bcdb5d7cd983e32440a352114a44237
=======

  post{
      always {
        echo 'Building multibranch pipeline for worker is completed..'
      }
      failure {
          slackSend (channel: "jenkins-cicd", message: "Jenkins anam - Build Failed - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
      }
      success {
          slackSend (channel: "jenkins-cicd", message: "Jenkins anam - Build Succeeded - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
      }
    }

>>>>>>> 22de44a0171d0b220643706258d6704d9a888724
  }
}
